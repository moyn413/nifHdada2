path = "/Users/molly/Dropbox/NitrogenFixation_Singapore/Molecular/SEQUENCING_RESULTS_combined/16S/Plots/",
width = 10,
height = 8)
x3= ps.goniH.abund  %>% ps_filter(Type3 == "Tissue") %>%
comp_barplot(
tax_level = "Genus",
label = "Name", # name an alternative variable to label axis
n_taxa = 15, # give more taxa unique colours
facet_by = "Month1",
taxon_renamer = function(x) stringr::str_replace_all(x, "_", " "), # remove underscores
other_name = "Other genera", # set custom name for the "other" category
merge_other = FALSE, # split the "Other" category to display alpha diversity
bar_width = 0.7, # reduce the bar width to 70% of one row
bar_outline_colour = "grey5" # is the default (use NA to remove outlines)
)
x4= ps.goniH.abund  %>% ps_filter(Type3 == "Tissue") %>%
comp_barplot(
tax_level = "Genus",
label = "Name", # name an alternative variable to label axis
n_taxa = 15, # give more taxa unique colours
facet_by = "Month1",
taxon_renamer = function(x) stringr::str_replace_all(x, "_", " "), # remove underscores
other_name = "Other genera", # set custom name for the "other" category
merge_other = FALSE, # split the "Other" category to display alpha diversity
bar_width = 0.7, # reduce the bar width to 70% of one row
bar_outline_colour = "grey5" # is the default (use NA to remove outlines)
)
x4
ggsave("Bar_Goniopora_Hantu.pdf", plot = x4 ,
path = "/Users/molly/Dropbox/NitrogenFixation_Singapore/Molecular/SEQUENCING_RESULTS_combined/16S/Plots/",
width = 10,
height = 8)
x4= ps.goniH.abund  %>% ps_filter(Type3 == "Tissue") %>%
comp_barplot(
tax_level = "Genus",
label = "Name", # name an alternative variable to label axis
n_taxa = 15, # give more taxa unique colours
facet_by = "Month1",
taxon_renamer = function(x) stringr::str_replace_all(x, "_", " "), # remove underscores
other_name = "Other genera", # set custom name for the "other" category
merge_other = FALSE, # split the "Other" category to display alpha diversity
bar_width = 0.7, # reduce the bar width to 70% of one row
bar_outline_colour = "grey5" # is the default (use NA to remove outlines)
)
x4= ps.goniH.abund  %>% ps_filter(Type3 == "Tissue") %>%
comp_barplot(
tax_level = "Genus",
label = "Name", # name an alternative variable to label axis
n_taxa = 15, # give more taxa unique colours
facet_by = "Month1",
taxon_renamer = function(x) stringr::str_replace_all(x, "_", " "), # remove underscores
other_name = "Other genera", # set custom name for the "other" category
merge_other = FALSE, # split the "Other" category to display alpha diversity
bar_width = 0.7, # reduce the bar width to 70% of one row
bar_outline_colour = "grey5" # is the default (use NA to remove outlines)
)
ggsave("Bar_Goniopora_Hantu.pdf", plot = x4 ,
path = "/Users/molly/Dropbox/NitrogenFixation_Singapore/Molecular/SEQUENCING_RESULTS_combined/16S/Plots/",
width = 10,
height = 8)
x3= ps.platyH.abund  %>% ps_filter(Type3 == "Tissue") %>%
comp_barplot(
tax_level = "Genus",
label = "Name", # name an alternative variable to label axis
n_taxa = 15, # give more taxa unique colours
facet_by = "Month1",
taxon_renamer = function(x) stringr::str_replace_all(x, "_", " "), # remove underscores
other_name = "Other genera", # set custom name for the "other" category
merge_other = FALSE, # split the "Other" category to display alpha diversity
bar_width = 0.7, # reduce the bar width to 70% of one row
bar_outline_colour = "grey5" # is the default (use NA to remove outlines)
)
ggsave("Bar_Platygyra_Hantu.pdf", plot = x3 ,
path = "/Users/molly/Dropbox/NitrogenFixation_Singapore/Molecular/SEQUENCING_RESULTS_combined/16S/Plots/",
width = 10,
height = 8)
x2= ps.platyK.abund  %>% ps_filter(Type3 == "Tissue") %>%
comp_barplot(
tax_level = "Genus",
label = "Name", # name an alternative variable to label axis
n_taxa = 15, # give more taxa unique colours
facet_by = "Month1",
taxon_renamer = function(x) stringr::str_replace_all(x, "_", " "), # remove underscores
other_name = "Other genera", # set custom name for the "other" category
merge_other = FALSE, # split the "Other" category to display alpha diversity
bar_width = 0.7, # reduce the bar width to 70% of one row
bar_outline_colour = "grey5" # is the default (use NA to remove outlines)
)
x2= ps.platyK.abund  %>% ps_filter(Type3 == "Tissue") %>%
comp_barplot(
tax_level = "Genus",
label = "Name", # name an alternative variable to label axis
n_taxa = 15, # give more taxa unique colours
facet_by = "Month1",
taxon_renamer = function(x) stringr::str_replace_all(x, "_", " "), # remove underscores
other_name = "Other genera", # set custom name for the "other" category
merge_other = FALSE, # split the "Other" category to display alpha diversity
bar_width = 0.7, # reduce the bar width to 70% of one row
bar_outline_colour = "grey5" # is the default (use NA to remove outlines)
)
ggsave("Bar_Platygyra_Kusu.pdf", plot = x2 ,
path = "/Users/molly/Dropbox/NitrogenFixation_Singapore/Molecular/SEQUENCING_RESULTS_combined/16S/Plots/",
width = 10,
height = 8)
x1= ps.pocilK.abund  %>% ps_filter(Type3 == "Tissue") %>%
comp_barplot(
tax_level = "Genus",
label = "Name", # name an alternative variable to label axis
n_taxa = 15, # give more taxa unique colours
facet_by = "Month1",
taxon_renamer = function(x) stringr::str_replace_all(x, "_", " "), # remove underscores
other_name = "Other genera", # set custom name for the "other" category
merge_other = FALSE, # split the "Other" category to display alpha diversity
bar_width = 0.7, # reduce the bar width to 70% of one row
bar_outline_colour = "grey5" # is the default (use NA to remove outlines)
)
x1= ps.pocilK.abund  %>% ps_filter(Type3 == "Tissue") %>%
comp_barplot(
tax_level = "Genus",
label = "Name", # name an alternative variable to label axis
n_taxa = 15, # give more taxa unique colours
facet_by = "Month1",
taxon_renamer = function(x) stringr::str_replace_all(x, "_", " "), # remove underscores
other_name = "Other genera", # set custom name for the "other" category
merge_other = FALSE, # split the "Other" category to display alpha diversity
bar_width = 0.7, # reduce the bar width to 70% of one row
bar_outline_colour = "grey5" # is the default (use NA to remove outlines)
)
ggsave("Bar_Pocillopora_Kusu.pdf", plot = x1 ,
path = "/Users/molly/Dropbox/NitrogenFixation_Singapore/Molecular/SEQUENCING_RESULTS_combined/16S/Plots/",
width = 15,
height = 8)
knitr::opts_chunk$set(val=TRUE,
cache=TRUE,
echo=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE,tidy.opts=list(width.cutoff=60),tidy=TRUE,error = TRUE)
library(plyr)
library(dplyr)
library(DESeq2)
library(ggplot2)
library(vegan)
library(phyloseq)
library(ape)
library(decontam)
library(stringr)
library(tibble)
library(phangorn)
library(seqinr)
library(DECIPHER)
library(dada2)
library(kableExtra)
library(grid)
library(gridExtra)
library(lattice)
library(tidyverse)
library(knitr)
library(treemap)
library(treemapify)
library(viridis)
library(RColorBrewer)
library(metagMisc)
# if (!require("BiocManager", quietly = TRUE))
# install.packages("BiocManager")
# BiocManager::install("treemap")
# devtools::install_github("vmikk/metagMisc")
# rm(list = ls())
#library(ggtree)
ps <- readRDS("/Users/molly/Dropbox/POSTDOC_MBL/Data/Amplicon/TR_16S/dada2/TR2021_16S_phyloseq.rds")   #read RDS phyloseq file
# ps <- readRDS("/Users/molly/Dropbox/NitrogenFixation_Singapore/Molecular/SEQUENCING_RESULTS2020/16S/16S_August_coral_SW_plus_wneg/dada2/CORAL16S_phyloseq_90.rds")   #read RDS phyloseq file
dataset_path <- "/Users/molly/Dropbox/POSTDOC_MBL/Data/Amplicon/TR_16S/dada2"
path_dataset <- function(file_name) str_c(dataset_path, file_name)
dada2_dir <-  path_dataset("/dada2/")
#treefasta_dir <-path_dataset("/dada2/trees/fastafiles/")
tax.clean <- data.frame(tax_table(ps))
for (i in 1:6){ tax.clean[,i] <- as.character(tax.clean[,i])}
tax.clean[is.na(tax.clean)] <- ""
for (i in 1:nrow(tax.clean)){
if (tax.clean[i,2] == ""){
kingdom <- paste("Kingdom_", tax.clean[i,1], sep = "")
tax.clean[i, 2:6] <- kingdom
} else if (tax.clean[i,3] == ""){
phylum <- paste("Phylum_", tax.clean[i,2], sep = "")
tax.clean[i, 3:6] <- phylum
} else if (tax.clean[i,4] == ""){
class <- paste("Class_", tax.clean[i,3], sep = "")
tax.clean[i, 4:6] <- class
} else if (tax.clean[i,5] == ""){
order <- paste("Order_", tax.clean[i,4], sep = "")
tax.clean[i, 5:6] <- order
} else if (tax.clean[i,6] == ""){
family <- paste("Family_", tax.clean[i,5], sep = "")
tax.clean[i, 6:6] <- family
}
}
tax_table(ps) <- as.matrix(tax.clean)
# Plot rarefaction curve
# rarecurve(t(otu_table(ps)), step=50, cex=0.5)
# # Identify contaminants using frequency method
#Remove samples with no reads which affect decontam
#ps <- prune_samples(sample_sums(ps)>=5, ps)
#Frequency decontam
# contamdf.freq <- isContaminant(ps, method="frequency", conc="DNA")
# head(contamdf.freq)
# table(contamdf.freq$contaminant)
# head(which(contamdf.freq$contaminant))
# ps.noncontam <- prune_taxa(!contamdf.freq$contaminant, ps)
# ps.noncontam
#Prevelance decontam doesn't seem to be working well for this dataset. It's missing the very obvious contaminant otu0006 and keeps identifying otu0005 as a contaminant, which doesn't seem right. Would it be worth it to use just one sample type to identify the contaminants? Or just do nothing because the otu0005 isn't present in the actual samples at all?
# sample_data(ps)$is.neg <- sample_data(ps)$Sample_or_Control == "Control"
# contamdf.prev01 <- isContaminant(ps, method="prevalence", neg="is.neg", threshold=0.1)
# table(contamdf.prev01$contaminant)
# which(contamdf.prev01$contaminant)
# #remove contaminants
# ps.noncontam <- prune_taxa(!contamdf.prev01$contaminant, ps)
#Remove control samples
ps.samples <-  ps %>% subset_samples(Sample_or_Control != "Control")
#Remove chloroplast sequences. Subset taxa will remove NA so need to add exception for "or is NA"
ps.noC <- subset_taxa(ps.samples, Order != "Chloroplast"| is.na(Order)) # ntaxa=12244
ps.noC_noM <- subset_taxa(ps.august_noC, Family != "Mitochondria"| is.na(Family)) #ntaxa = 12181
#Make seperate chloroplast and mitochondira phyloseqs
ps.noncontam_plastid <- subset_taxa(ps.samples, Order == "Chloroplast")  #ntaxa = 169
ps.noncontam_mito <- subset_taxa(ps.samples, Family == "Mitochondria")   #ntaxa = 63
# plot rarefraction curve on sample data (contaminants removed)
#rare <- rarecurve(t(otu_table(ps.noncontam_wchloro_noC)), step=50, cex=0.5, xlab = "Sample Size", ylab = "ASVs", label = FALSE)
# Make separate phyloseqs for different sample types
ps.all <- ps.noC
ps.bloom <-  ps.all %>% subset_samples(SampleType == "Bloom")
ps.bmw <-  ps.all %>% subset_samples(SampleType == "Bloom" | SampleType =="Web" | SampleType == "Mat")
ps.core <-  ps.all%>% subset_samples(SampleType == "Core")
# Show number of reads in each sample
DNAreads <- ps.all %>% sample_sums(.)
knitr::kable(DNAreads) %>% kable_styling(font_size = 8)
# Remove samples with fewer than 60 reads (if needed)
ps.all.LR <- prune_samples(sample_sums(ps.all)>=60, ps.all)
ps.bloom.LR <- prune_samples(sample_sums(ps.bloom)>=60, ps.bloom)
ps.bmw.LR <- prune_samples(sample_sums(ps.bmw)>=60, ps.bmw)
ps.core.LR <- prune_samples(sample_sums(ps.core)>=60, ps.core)
# Remove OTUs occurring fewer than 10x
ps.all.LO = prune_taxa(taxa_sums(ps.all.LR)>=10, ps.all.LR)
ps.bloom.LO <- prune_taxa(taxa_sums(ps.bloom.LR)>=10, ps.bloom.LR)
ps.bmw.LO <- prune_taxa(taxa_sums(ps.bmw.LR)>=10, ps.bmw.LR)
ps.core.LO <- prune_taxa(taxa_sums(ps.core.LR)>=10, ps.core.LR)
# Track number of OTUs removed
n.all <- ps.all.LR %>% prune_taxa(taxa_sums(ps.all.LR)>=1,.) %>% ntaxa(.)
n.all.LO <-ntaxa(ps.all.LO)
n.ps.bloom <-ps.bloom.LR %>% prune_taxa(taxa_sums(ps.bloom.LR)>=1,.) %>% ntaxa(.)
n.ps.bloom.LO <- ntaxa(ps.bloom.LO)
n.ps.bmw <- ps.bmw.LR %>% prune_taxa(taxa_sums(ps.bmw.LR)>=1,.) %>% ntaxa(.)
n.ps.bmw.LO <-ntaxa(ps.bmw.LO)
n.ps.core <-ps.core.LR %>% prune_taxa(taxa_sums(ps.core.LR)>=1,.) %>% ntaxa(.)
n.ps.core.LO <-ntaxa(ps.core.LO)
precuts <-c(n.all, n.ps.bloom,n.ps.bmw,n.ps.core)
postcuts <- c(n.all.LO, n.ps.bloom.LO, n.ps.bmw.LO, n.ps.core.LO )
track <- cbind(precuts,postcuts)
rownames(track) <- c("all", "bloom", "bmw", "core")
colnames(track) <- c("# OTUs", "# OTUs post cuts")
knitr::kable(track)
ps_normalize_median <- function (ps, title) {
ps_median = median(sample_sums(ps))
cat(sprintf("\nThe median number of reads used for normalization of %s is  %.0f", title, ps_median))
normalize_median = function(x, t=ps_median) (if(sum(x) > 0){ t * (x / sum(x))} else {x})
ps = transform_sample_counts(ps, normalize_median)
cat(str_c("\nPhyloseq ",title, "\n========== \n") )
print(ps)
}
ps_abundant <- function(ps,contrib_min=0.01, title){
total_per_sample <- max(sample_sums(ps))
ps <- filter_taxa(ps, function(x) sum(x > total_per_sample*contrib_min) > 0, TRUE)
ps <- ps_normalize_median(ps, title)
}
# Normalize phyloseq files with low abundant OTUs (for diversity plots)
ps.all.LR.norm = ps_normalize_median(ps.all.LR, "16S_all_LR_norm")
ps.bloom.LR.norm = ps_normalize_median(ps.bloom.LR, "Bloom_16S_LR_norm")
ps.bmw.LR.norm = ps_normalize_median(ps.bmw.LR, "BMW_LR_norm")
ps.core.LR.norm = ps_normalize_median(ps.core.LR, "Core_LR_norm")
# Normalize phyloseq file without low abundant OTUs
ps.all.norm = ps_normalize_median(ps.all.LO, "16S_all_norm")
ps.bloom.norm = ps_normalize_median(ps.bloom.LO, "Bloom_LO_norm")
ps.bmw.norm = ps_normalize_median(ps.bmw.LO, "BMW_LO_norm")
ps.core.norm = ps_normalize_median(ps.core.LO, "Core_LO__norm")
# Remove non-abundant taxa and normalize again
ps.all.abund = ps_abundant(ps.all.norm,contrib_min=0.005, "16S_all_abund")
ps.bloom.abund = ps_abundant(ps.bloom.norm,contrib_min=0.005, "Bloom_all_abund")
ps.bmw.abund = ps_abundant(ps.bmw.norm,contrib_min=0.005, "BMW__abund")
ps.core.abund = ps_abundant(ps.core.norm,contrib_min=0.005, "Core_abund")
ps.core.abund2 = ps_abundant(ps.core.norm,contrib_min=0.01, "Core_abund")
#Changed to contrib_min 0.008 for heatmap to reduce number of genera in plot for poster
ps.bloom.abund.no10<-subset_samples(ps.bloom.norm, SamplingDay!="10") %>%ps_abundant(contrib_min=0.005, "Bloom_all_abund_no10")
ps.bloom.norm.noChlorobi =subset_samples(ps.bloom.norm, SamplingDay!="10")%>%subset_taxa( Class!="Chlorobia")%>% ps_normalize_median("Bloom_LO_norm_noChlorobi")
ps.bloom.abund.noChlorobi =ps_abundant(ps.bloom.norm.noChlorobi,contrib_min=0.005, "No Chlorobi Abund")
knitr::opts_chunk$set(val=TRUE,
cache=TRUE,
echo=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE,tidy.opts=list(width.cutoff=60),tidy=TRUE,error = TRUE)
library(plyr)
library(dplyr)
library(DESeq2)
library(ggplot2)
library(vegan)
library(phyloseq)
library(ape)
library(decontam)
library(stringr)
library(tibble)
library(phangorn)
library(seqinr)
library(DECIPHER)
library(dada2)
library(kableExtra)
library(grid)
library(gridExtra)
library(lattice)
library(tidyverse)
library(knitr)
library(treemap)
library(treemapify)
library(viridis)
library(RColorBrewer)
library(metagMisc)
# if (!require("BiocManager", quietly = TRUE))
# install.packages("BiocManager")
# BiocManager::install("treemap")
# devtools::install_github("vmikk/metagMisc")
# rm(list = ls())
#library(ggtree)
ps <- readRDS("/Users/molly/Dropbox/POSTDOC_MBL/Data/Amplicon/2021/TR_16S/Original/dada2/TR2021_16S_phyloseq.rds")   #read RDS phyloseq file
# ps <- readRDS("/Users/molly/Dropbox/NitrogenFixation_Singapore/Molecular/SEQUENCING_RESULTS2020/16S/16S_August_coral_SW_plus_wneg/dada2/CORAL16S_phyloseq_90.rds")   #read RDS phyloseq file
dataset_path <- "/Users/molly/Dropbox/POSTDOC_MBL/Data/Amplicon/TR_16S/dada2"
path_dataset <- function(file_name) str_c(dataset_path, file_name)
dada2_dir <-  path_dataset("/dada2/")
#treefasta_dir <-path_dataset("/dada2/trees/fastafiles/")
tax.clean <- data.frame(tax_table(ps))
for (i in 1:6){ tax.clean[,i] <- as.character(tax.clean[,i])}
tax.clean[is.na(tax.clean)] <- ""
for (i in 1:nrow(tax.clean)){
if (tax.clean[i,2] == ""){
kingdom <- paste("Kingdom_", tax.clean[i,1], sep = "")
tax.clean[i, 2:6] <- kingdom
} else if (tax.clean[i,3] == ""){
phylum <- paste("Phylum_", tax.clean[i,2], sep = "")
tax.clean[i, 3:6] <- phylum
} else if (tax.clean[i,4] == ""){
class <- paste("Class_", tax.clean[i,3], sep = "")
tax.clean[i, 4:6] <- class
} else if (tax.clean[i,5] == ""){
order <- paste("Order_", tax.clean[i,4], sep = "")
tax.clean[i, 5:6] <- order
} else if (tax.clean[i,6] == ""){
family <- paste("Family_", tax.clean[i,5], sep = "")
tax.clean[i, 6:6] <- family
}
}
tax_table(ps) <- as.matrix(tax.clean)
# Plot rarefaction curve
# rarecurve(t(otu_table(ps)), step=50, cex=0.5)
# # Identify contaminants using frequency method
#Remove samples with no reads which affect decontam
#ps <- prune_samples(sample_sums(ps)>=5, ps)
#Frequency decontam
# contamdf.freq <- isContaminant(ps, method="frequency", conc="DNA")
# head(contamdf.freq)
# table(contamdf.freq$contaminant)
# head(which(contamdf.freq$contaminant))
# ps.noncontam <- prune_taxa(!contamdf.freq$contaminant, ps)
# ps.noncontam
#Prevelance decontam doesn't seem to be working well for this dataset. It's missing the very obvious contaminant otu0006 and keeps identifying otu0005 as a contaminant, which doesn't seem right. Would it be worth it to use just one sample type to identify the contaminants? Or just do nothing because the otu0005 isn't present in the actual samples at all?
# sample_data(ps)$is.neg <- sample_data(ps)$Sample_or_Control == "Control"
# contamdf.prev01 <- isContaminant(ps, method="prevalence", neg="is.neg", threshold=0.1)
# table(contamdf.prev01$contaminant)
# which(contamdf.prev01$contaminant)
# #remove contaminants
# ps.noncontam <- prune_taxa(!contamdf.prev01$contaminant, ps)
#Remove control samples
ps.samples <-  ps %>% subset_samples(Sample_or_Control != "Control")
#Remove chloroplast sequences. Subset taxa will remove NA so need to add exception for "or is NA"
ps.noC <- subset_taxa(ps.samples, Order != "Chloroplast"| is.na(Order)) # ntaxa=12244
ps.noC_noM <- subset_taxa(ps.august_noC, Family != "Mitochondria"| is.na(Family)) #ntaxa = 12181
#Make seperate chloroplast and mitochondira phyloseqs
ps.noncontam_plastid <- subset_taxa(ps.samples, Order == "Chloroplast")  #ntaxa = 169
ps.noncontam_mito <- subset_taxa(ps.samples, Family == "Mitochondria")   #ntaxa = 63
# plot rarefraction curve on sample data (contaminants removed)
#rare <- rarecurve(t(otu_table(ps.noncontam_wchloro_noC)), step=50, cex=0.5, xlab = "Sample Size", ylab = "ASVs", label = FALSE)
# Make separate phyloseqs for different sample types
ps.all <- ps.noC
ps.bloom <-  ps.all %>% subset_samples(SampleType == "Bloom")
ps.bmw <-  ps.all %>% subset_samples(SampleType == "Bloom" | SampleType =="Web" | SampleType == "Mat")
ps.core <-  ps.all%>% subset_samples(SampleType == "Core")
# Show number of reads in each sample
DNAreads <- ps.all %>% sample_sums(.)
knitr::kable(DNAreads) %>% kable_styling(font_size = 8)
# Remove samples with fewer than 60 reads (if needed)
ps.all.LR <- prune_samples(sample_sums(ps.all)>=60, ps.all)
ps.bloom.LR <- prune_samples(sample_sums(ps.bloom)>=60, ps.bloom)
ps.bmw.LR <- prune_samples(sample_sums(ps.bmw)>=60, ps.bmw)
ps.core.LR <- prune_samples(sample_sums(ps.core)>=60, ps.core)
# Remove OTUs occurring fewer than 10x
ps.all.LO = prune_taxa(taxa_sums(ps.all.LR)>=10, ps.all.LR)
ps.bloom.LO <- prune_taxa(taxa_sums(ps.bloom.LR)>=10, ps.bloom.LR)
ps.bmw.LO <- prune_taxa(taxa_sums(ps.bmw.LR)>=10, ps.bmw.LR)
ps.core.LO <- prune_taxa(taxa_sums(ps.core.LR)>=10, ps.core.LR)
# Track number of OTUs removed
n.all <- ps.all.LR %>% prune_taxa(taxa_sums(ps.all.LR)>=1,.) %>% ntaxa(.)
n.all.LO <-ntaxa(ps.all.LO)
n.ps.bloom <-ps.bloom.LR %>% prune_taxa(taxa_sums(ps.bloom.LR)>=1,.) %>% ntaxa(.)
n.ps.bloom.LO <- ntaxa(ps.bloom.LO)
n.ps.bmw <- ps.bmw.LR %>% prune_taxa(taxa_sums(ps.bmw.LR)>=1,.) %>% ntaxa(.)
n.ps.bmw.LO <-ntaxa(ps.bmw.LO)
n.ps.core <-ps.core.LR %>% prune_taxa(taxa_sums(ps.core.LR)>=1,.) %>% ntaxa(.)
n.ps.core.LO <-ntaxa(ps.core.LO)
precuts <-c(n.all, n.ps.bloom,n.ps.bmw,n.ps.core)
postcuts <- c(n.all.LO, n.ps.bloom.LO, n.ps.bmw.LO, n.ps.core.LO )
track <- cbind(precuts,postcuts)
rownames(track) <- c("all", "bloom", "bmw", "core")
colnames(track) <- c("# OTUs", "# OTUs post cuts")
knitr::kable(track)
ps_normalize_median <- function (ps, title) {
ps_median = median(sample_sums(ps))
cat(sprintf("\nThe median number of reads used for normalization of %s is  %.0f", title, ps_median))
normalize_median = function(x, t=ps_median) (if(sum(x) > 0){ t * (x / sum(x))} else {x})
ps = transform_sample_counts(ps, normalize_median)
cat(str_c("\nPhyloseq ",title, "\n========== \n") )
print(ps)
}
ps_abundant <- function(ps,contrib_min=0.01, title){
total_per_sample <- max(sample_sums(ps))
ps <- filter_taxa(ps, function(x) sum(x > total_per_sample*contrib_min) > 0, TRUE)
ps <- ps_normalize_median(ps, title)
}
# Normalize phyloseq files with low abundant OTUs (for diversity plots)
ps.all.LR.norm = ps_normalize_median(ps.all.LR, "16S_all_LR_norm")
ps.bloom.LR.norm = ps_normalize_median(ps.bloom.LR, "Bloom_16S_LR_norm")
ps.bmw.LR.norm = ps_normalize_median(ps.bmw.LR, "BMW_LR_norm")
ps.core.LR.norm = ps_normalize_median(ps.core.LR, "Core_LR_norm")
# Normalize phyloseq file without low abundant OTUs
ps.all.norm = ps_normalize_median(ps.all.LO, "16S_all_norm")
ps.bloom.norm = ps_normalize_median(ps.bloom.LO, "Bloom_LO_norm")
ps.bmw.norm = ps_normalize_median(ps.bmw.LO, "BMW_LO_norm")
ps.core.norm = ps_normalize_median(ps.core.LO, "Core_LO__norm")
# Remove non-abundant taxa and normalize again
ps.all.abund = ps_abundant(ps.all.norm,contrib_min=0.005, "16S_all_abund")
ps.bloom.abund = ps_abundant(ps.bloom.norm,contrib_min=0.005, "Bloom_all_abund")
ps.bmw.abund = ps_abundant(ps.bmw.norm,contrib_min=0.005, "BMW__abund")
ps.core.abund = ps_abundant(ps.core.norm,contrib_min=0.005, "Core_abund")
ps.core.abund2 = ps_abundant(ps.core.norm,contrib_min=0.01, "Core_abund")
#Changed to contrib_min 0.008 for heatmap to reduce number of genera in plot for poster
ps.bloom.abund.no10<-subset_samples(ps.bloom.norm, SamplingDay!="10") %>%ps_abundant(contrib_min=0.005, "Bloom_all_abund_no10")
ps.bloom.norm.noChlorobi =subset_samples(ps.bloom.norm, SamplingDay!="10")%>%subset_taxa( Class!="Chlorobia")%>% ps_normalize_median("Bloom_LO_norm_noChlorobi")
ps.bloom.abund.noChlorobi =ps_abundant(ps.bloom.norm.noChlorobi,contrib_min=0.005, "No Chlorobi Abund")
# adding diff shapes to graphs, fixing colors--web adn upper bloom=?
#   knitr::opts_chunk$set(cache=TRUE,
#                         tidy=TRUE,
#                         comment=NA,
#                         message=FALSE,
#                         warning=FALSE,
#                         tidy.opts=list(width.cutoff=60))
#
# knitr::opts_knit$set(root.dir = '/Volumes/GoogleDrive/My Drive/UChicago/TR_Thesis_Project/TR2022_amplicon')
# Load packages
library(tidyverse)
library(ggplot2)
library(ggtext)
library(mdthemes)
library(plyr)
library(dplyr)
library(tibble)
library(knitr)
library(stringr)
library(seqinr)
library(dada2)
library(phyloseq)
library(vegan)
library(DESeq2)
library(ape)
library(decontam)
library(phangorn)
library(DECIPHER)
library(kableExtra)
library(grid)
library(gridExtra)
library(lattice)
library(treemap)
library(treemapify)
library(viridis)
library(RColorBrewer)
#library(microViz)
library(data.table)
# Set the theme for plots
theme_set(theme_classic(base_size=16))
ps <- readRDS("/Users/molly/Dropbox/POSTDOC_MBL/Data/Amplicon/2022/Anna/TR2022_16S_phyloseq.rds")
sample_data(ps)
setwd("/Users/molly/Documents/GitHub/nifHdada2")
df<-read.csv("/Users/molly/Documents/GitHub/nifHdada2/nifH_dada2_phylum_v2.0.5.csv", header = TRUE)
writeFasta<-function(data, filename){
fastaLines = c()
for (rowNum in 1:nrow(data)){
fastaLines = c(fastaLines, as.character(paste(">", data[rowNum,"tax"], sep = ""))) #Modify here to tax/tax2 accordingly
fastaLines = c(fastaLines,as.character(data[rowNum,"sequence"]))
}
fileConn<-file(filename)
writeLines(fastaLines, fileConn)
close(fileConn)
}
# write fasta file with clusters in taxonomy
writeFasta(df, "nifH_dada2_v2.0.5.fasta")
